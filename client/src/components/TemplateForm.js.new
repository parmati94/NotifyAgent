// filepath: /home/paul/code/NotifyAgent/client/src/components/TemplateForm.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import PageHeader from './PageHeader';
import { 
  Box, Dialog, DialogTitle, DialogContent, DialogActions, TextField, 
  IconButton, Card, CardContent, Typography, Grid, Divider, 
  useTheme, alpha, Tooltip, Chip
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import EditIcon from '@mui/icons-material/Edit';
import AddIcon from '@mui/icons-material/Add';
import CloseIcon from '@mui/icons-material/Close';
import TemplateIcon from '@mui/icons-material/Description';
import DataTable from './DataTable';
import CustomButton from './Button';
import CustomTextField from './TextField';
import CustomMultilineTextField from './CustomMultilineTextField';
import CustomSnackbar from './CustomSnackbar';
import ConfirmationDialog from './ConfirmationDialog';

const REACT_APP_API_BASE_URL = process.env.REACT_APP_API_BASE_URL;

function TemplateForm() {
  const [templates, setTemplates] = useState([]);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [templateName, setTemplateName] = useState('');
  const [templateSubject, setTemplateSubject] = useState('');
  const [templateBody, setTemplateBody] = useState('');
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [editMode, setEditMode] = useState(false);
  const [editTemplateId, setEditTemplateId] = useState(null);
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [templateToDelete, setTemplateToDelete] = useState(null);
  const theme = useTheme();

  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        const response = await axios.get(`${REACT_APP_API_BASE_URL}/message_templates/`);
        setTemplates(response.data);
      } catch (error) {
        console.error('Error fetching templates:', error);
      }
    };

    fetchTemplates();
  }, []);

  const handleDialogOpen = () => {
    setEditMode(false);
    setEditTemplateId(null);
    setTemplateName('');
    setTemplateSubject('');
    setTemplateBody('');
    setDialogOpen(true);
  };

  const handleDialogClose = () => {
    setDialogOpen(false);
    setTemplateName('');
    setTemplateSubject('');
    setTemplateBody('');
    setEditMode(false);
    setEditTemplateId(null);
  };

  const handleSaveTemplate = async () => {
    if (!templateName || !templateSubject || !templateBody) {
      setSnackbarMessage('All fields are required');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
      return;
    }

    try {
      if (editMode && editTemplateId) {
        // Update existing template
        const response = await axios.put(`${REACT_APP_API_BASE_URL}/message_templates/${editTemplateId}`, {
          name: templateName,
          subject: templateSubject,
          body: templateBody
        });
        
        setTemplates(templates.map(template => 
          template.id === editTemplateId ? response.data : template
        ));
        
        setSnackbarMessage('Template updated successfully');
      } else {
        // Create new template
        const response = await axios.post(`${REACT_APP_API_BASE_URL}/message_templates/`, {
          name: templateName,
          subject: templateSubject,
          body: templateBody
        });
        
        setTemplates([...templates, response.data]);
        setSnackbarMessage('Template saved successfully');
      }
      
      handleDialogClose();
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
    } catch (error) {
      console.error('Error saving template:', error);
      setSnackbarMessage('Error saving template');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  const handleDeleteTemplate = async () => {
    if (!templateToDelete) return;

    try {
      await axios.delete(`${REACT_APP_API_BASE_URL}/message_templates/${templateToDelete.id}`);
      setTemplates(templates.filter(template => template.id !== templateToDelete.id));
      setSnackbarMessage('Template deleted successfully');
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
      setDeleteDialogOpen(false);
      setTemplateToDelete(null);
    } catch (error) {
      console.error('Error deleting template:', error);
      setSnackbarMessage('Error deleting template');
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    }
  };

  const handleDeleteDialogOpen = (template) => {
    setTemplateToDelete(template);
    setDeleteDialogOpen(true);
  };

  const handleDeleteDialogClose = (confirmed) => {
    if (confirmed) {
      handleDeleteTemplate();
    } else {
      setDeleteDialogOpen(false);
      setTemplateToDelete(null);
    }
  };

  const handleEditTemplate = (template) => {
    setEditMode(true);
    setEditTemplateId(template.id);
    setTemplateName(template.name);
    setTemplateSubject(template.subject);
    setTemplateBody(template.body);
    setDialogOpen(true);
  };

  return (
    <Box sx={{ maxWidth: 1200, margin: '0 auto', p: 2 }}>
      <PageHeader title="Message Templates" subtitle="Create and manage reusable message templates" />
      
      <Box sx={{ mb: 4 }}>
        <Card elevation={2} sx={{ 
          borderRadius: theme.shape.borderRadius
        }}>
          <CardContent sx={{ p: 0 }}>
            <Box sx={{
              p: 3,
              backgroundColor: alpha(theme.palette.primary.light, 0.1),
              borderBottom: `1px solid ${theme.palette.divider}`
            }}>
              <Grid container spacing={2} alignItems="center">
                <Grid item xs={12} sm={6}>
                  <Typography variant="h6" component="h3" sx={{ mb: 1 }}>
                    Template Library
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    You have {templates.length} template{templates.length !== 1 ? 's' : ''} available
                  </Typography>
                </Grid>
                <Grid item xs={12} sm={6} sx={{ 
                  display: 'flex', 
                  justifyContent: { xs: 'flex-start', sm: 'flex-end' }
                }}>
                  <CustomButton 
                    onClick={handleDialogOpen}
                    color="primary"
                    startIcon={<AddIcon />}
                    variant="contained"
                  >
                    Create Template
                  </CustomButton>
                </Grid>
              </Grid>
            </Box>

            <Box sx={{ width: '100%' }}>
              <DataTable
                columns={[
                  {
                    id: 'name',
                    header: 'Template Name',
                    accessor: (row) => row.name,
                    align: 'left',
                    searchable: true,
                    render: (row) => (
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <TemplateIcon color="primary" fontSize="small" />
                        {row.name}
                      </Box>
                    )
                  },
                  {
                    id: 'subject',
                    header: 'Subject',
                    accessor: (row) => row.subject,
                    align: 'left',
                    searchable: true
                  },
                  {
                    id: 'body',
                    header: 'Body Preview',
                    accessor: (row) => row.body,
                    align: 'left',
                    searchable: true,
                    render: (row) => (
                      <div style={{ 
                        maxWidth: 350, 
                        overflow: 'hidden', 
                        textOverflow: 'ellipsis', 
                        whiteSpace: 'nowrap' 
                      }}>
                        {row.body}
                      </div>
                    )
                  },
                  {
                    id: 'actions',
                    header: 'Actions',
                    accessor: () => null,
                    align: 'center',
                    sortable: false,
                    width: '150px',
                    render: (template) => (
                      <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                        <Tooltip title="Edit Template">
                          <IconButton 
                            onClick={() => handleEditTemplate(template)}
                            size="small"
                            sx={{ mr: 1 }}
                          >
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete Template">
                          <IconButton
                            onClick={() => handleDeleteDialogOpen(template)}
                            size="small"
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </Box>
                    )
                  }
                ]}
                data={templates}
                enableSearch={true}
                enableSort={true}
                defaultRowsPerPage={5}
                rowsPerPageOptions={[5, 10, 25]}
                emptyMessage="No templates available"
              />
            </Box>
          </CardContent>
        </Card>
      </Box>

      {/* Template Dialog */}
      <Dialog 
        open={dialogOpen} 
        onClose={handleDialogClose}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: {
            borderRadius: theme.shape.borderRadius,
            overflow: 'hidden'
          }
        }}
      >
        <DialogTitle sx={{ 
          backgroundColor: theme.palette.primary.light,
          color: theme.palette.primary.dark,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <TemplateIcon />
            <Typography variant="h6">
              {editMode ? 'Edit' : 'Create'} Message Template
            </Typography>
          </Box>
          <IconButton 
            onClick={handleDialogClose}
            size="small"
            sx={{ color: theme.palette.primary.dark }}
          >
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent sx={{ p: 3, mt: 2 }}>
          <Grid container spacing={3}>
            <Grid item xs={12}>
              <CustomTextField
                autoFocus
                label="Template Name"
                value={templateName}
                onChange={(e) => setTemplateName(e.target.value)}
                fullWidth
                required
                placeholder="Enter a descriptive name"
              />
            </Grid>
            <Grid item xs={12}>
              <CustomTextField
                label="Subject"
                value={templateSubject}
                onChange={(e) => setTemplateSubject(e.target.value)}
                fullWidth
                required
                placeholder="Email subject line"
              />
            </Grid>
            <Grid item xs={12}>
              <CustomMultilineTextField
                label="Message Body"
                value={templateBody}
                onChange={(e) => setTemplateBody(e.target.value)}
                fullWidth
                required
                minRows={8}
                placeholder="Enter your message content here"
              />
            </Grid>
          </Grid>
        </DialogContent>
        <DialogActions sx={{ 
          p: 3, 
          pt: 2,
          borderTop: `1px solid ${theme.palette.grey[200]}` 
        }}>
          <CustomButton 
            onClick={handleDialogClose} 
            color="secondary"
            variant="outlined"
          >
            Cancel
          </CustomButton>
          <CustomButton 
            onClick={handleSaveTemplate} 
            color="primary"
            disabled={!templateName.trim() || !templateSubject.trim() || !templateBody.trim()}
          >
            {editMode ? 'Update' : 'Save'} Template
          </CustomButton>
        </DialogActions>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <ConfirmationDialog
        open={deleteDialogOpen}
        title="Delete Template"
        content="Are you sure you want to delete this template? This action cannot be undone."
        onConfirm={handleDeleteDialogClose}
        onCancel={() => setDeleteDialogOpen(false)}
      />

      {/* Snackbar for notifications */}
      <CustomSnackbar
        open={snackbarOpen}
        message={snackbarMessage}
        severity={snackbarSeverity}
        onClose={() => setSnackbarOpen(false)}
      />
    </Box>
  );
}

export default TemplateForm;
